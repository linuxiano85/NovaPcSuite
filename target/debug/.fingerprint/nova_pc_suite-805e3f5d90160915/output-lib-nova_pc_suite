{"$message_type":"diagnostic","message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/backup/nova_pc_suite_backup.rs","byte_start":7019,"byte_end":7024,"line_start":228,"line_end":228,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn create_plan(&self) -> Result<BackupPlan>;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(async_fn_in_trait)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"src/backup/nova_pc_suite_backup.rs","byte_start":7050,"byte_end":7050,"line_start":228,"line_end":228,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"    async fn create_plan(&self) -> Result<BackupPlan>;","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"impl std::future::Future<Output = ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/backup/nova_pc_suite_backup.rs","byte_start":7068,"byte_end":7068,"line_start":228,"line_end":228,"column_start":54,"column_end":54,"is_primary":true,"text":[{"text":"    async fn create_plan(&self) -> Result<BackupPlan>;","highlight_start":54,"highlight_end":54}],"label":null,"suggested_replacement":"> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/backup/nova_pc_suite_backup.rs","byte_start":7019,"byte_end":7025,"line_start":228,"line_end":228,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn create_plan(&self) -> Result<BackupPlan>;","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/backup/nova_pc_suite_backup.rs:228:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn create_plan(&self) -> Result<BackupPlan>;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(async_fn_in_trait)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;9masync \u001b[0m\u001b[0mfn create_plan(&self) -> Result<BackupPlan>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn create_plan(&self) -> \u001b[0m\u001b[0m\u001b[38;5;10mimpl std::future::Future<Output = \u001b[0m\u001b[0mResult<BackupPlan>\u001b[0m\u001b[0m\u001b[38;5;10m> + Send\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"hiding a lifetime that's elided elsewhere is confusing","code":{"code":"mismatched_lifetime_syntaxes","explanation":null},"level":"warning","spans":[{"file_name":"src/plugins/events.rs","byte_start":3937,"byte_end":3942,"line_start":150,"line_end":150,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn create_scoped_publisher(&self, operation_id: Uuid) -> ScopedEventPublisher {","highlight_start":36,"highlight_end":41}],"label":"the lifetime is elided here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/plugins/events.rs","byte_start":3967,"byte_end":3987,"line_start":150,"line_end":150,"column_start":66,"column_end":86,"is_primary":false,"text":[{"text":"    pub fn create_scoped_publisher(&self, operation_id: Uuid) -> ScopedEventPublisher {","highlight_start":66,"highlight_end":86}],"label":"the same lifetime is hidden here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the same lifetime is referred to in inconsistent ways, making the signature confusing","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(mismatched_lifetime_syntaxes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `'_` for type paths","code":null,"level":"help","spans":[{"file_name":"src/plugins/events.rs","byte_start":3987,"byte_end":3987,"line_start":150,"line_end":150,"column_start":86,"column_end":86,"is_primary":true,"text":[{"text":"    pub fn create_scoped_publisher(&self, operation_id: Uuid) -> ScopedEventPublisher {","highlight_start":86,"highlight_end":86}],"label":null,"suggested_replacement":"<'_>","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consistently use `'_`","code":null,"level":"help","spans":[{"file_name":"src/plugins/events.rs","byte_start":3938,"byte_end":3938,"line_start":150,"line_end":150,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"    pub fn create_scoped_publisher(&self, operation_id: Uuid) -> ScopedEventPublisher {","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":"'_ ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/plugins/events.rs","byte_start":3987,"byte_end":3987,"line_start":150,"line_end":150,"column_start":86,"column_end":86,"is_primary":true,"text":[{"text":"    pub fn create_scoped_publisher(&self, operation_id: Uuid) -> ScopedEventPublisher {","highlight_start":86,"highlight_end":86}],"label":null,"suggested_replacement":"<'_>","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: hiding a lifetime that's elided elsewhere is confusing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/plugins/events.rs:150:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn create_scoped_publisher(&self, operation_id: Uuid) -> ScopedEventPublisher {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe same lifetime is hidden here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33mthe lifetime is elided here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the same lifetime is referred to in inconsistent ways, making the signature confusing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(mismatched_lifetime_syntaxes)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `'_` for type paths\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn create_scoped_publisher(&self, operation_id: Uuid) -> ScopedEventPublisher\u001b[0m\u001b[0m\u001b[38;5;10m<'_>\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
